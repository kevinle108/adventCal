using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApp1
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine("Program start.");
            StreamReader file = new StreamReader("input0.txt");
            int counter = 0;
            string line;
            //List<string> lines = new List<string>();
            List<int> lines = new List<int>();
            
            while ((line = file.ReadLine()) != null)
            {
                //if (counter == 3)
                //{
                //    break;
                //}

                lines.Add(Int32.Parse(line));
                counter++;
            }
            file.Close();
            // (max - min) / 3 + 1 => the least amount of elements in the arrangement
            // lines = lines.OrderBy(x => x).ToList();
            // List<List<int>> validArrangements = new List<List<int>>();
            // validArrangements.Add(lines);
            // int shortestArrangementLength = validArrangements.Min(x => x.Count);
            // int shortestPossibleArrangement = (lines.Max() + 3) / 3 + 1; 
            // //Console.WriteLine($"possible: {shortestPossibleArrangement}");
            // while (shortestArrangementLength >= shortestPossibleArrangement) 
            // {
            //     for (int i = 1; i < lines.Count; i++)
            //     {
            //         int takeOut = i;
            //         Console.WriteLine($"taking out: {i}");
            //         for (int x = 0; i < validArrangements.Count; i++) 
            //         {
            //             for (int j = 0; j < lines.Count; j++) 
            //             {
            //                 List<int> copy = DeepCopyList(validArrangements[x]);
            //                 copy.RemoveAt(j);
            //                 if (IsValidArragement(copy))
            //                 {
            //                     validArrangements.Add(copy);
            //                 }
            //             }
            //         }
            //         shortestArrangementLength = validArrangements.Min(x => x.Count);
            //     }
            // }
            //Console.WriteLine($"valid: {validArrangements}");
            lines = lines.OrderBy(x => x).ToList();
            int valids = 1;
            int jolt = 0;
            List<int> removeablesList = new List<int>();
            while (jolt < lines.Max()) 
            {
                int range = jolt + 4;
                var removables = lines.Where(x => x > jolt && x < range).ToList();
                jolt = removables.Max();
                removables.Remove(removables.Max());
                Console.WriteLine("Removables");
                Display(removables);
                Console.WriteLine();
                if (removables.Count > 0) {
                    if (removables.Count == 3) 
                    {
                        valids += 7;
                    }
                    else if (removables.Count == 2) 
                    {
                        valids += 2;
                    }
                    else
                    {
                        valids += 1;
                    }

                    foreach (int num in removables)
                    {
                        removeablesList.Add(num);
                    }  
                }
                
            }
            Console.WriteLine($"\nRemoveables Count: {removeablesList.Count}");
            Console.WriteLine($"\nValids: {valids * 2}");
            Console.WriteLine($"\n{counter} lines read");
            Console.WriteLine("Program done.");

        }

        public static int Factorial(int number)
        {
            if (number == 1)
                return 1;
            else
                return Factorial(number - 1);
        }

        public static List<int> DeepCopyList(List<int> lines)
        {
            List<int> copyList = new List<int>();
            foreach (int line in lines)
            {
                copyList.Add(line);
            }
            return copyList;
        }

        public static bool IsValidArragement(List<int> lines)
        {
            bool isValid = true;
            int jolt = 0;
            int jolt_diff = 0;
            for (int i = 0; i < lines.Count; i++)
            {
                jolt_diff = lines[i] - jolt;
                jolt = lines[i];
                if (!(jolt_diff >= 1 && jolt_diff <= 3))
                {
                    //Console.WriteLine($"line{i}, jolt_diff: {jolt_diff}");
                    isValid = false;
                    return isValid;
                }
            }
            return isValid;
        }
        public static void Display<T>(List<T> arr, params string[] parameters)
        {
            //foreach (int num in arr)
            //{
            //    Console.WriteLine(num);
            //}
            arr.ForEach(x => Console.WriteLine(x));
        }

        public static void DisplayListList(List<List<string>> listArr)
        {
            foreach (List<string> arr in listArr)
            {
                Console.WriteLine(arr[0]);
                Console.WriteLine($"   {arr[1]}");
            }
        }

        //public static void Display(List<string> arr)
        //{
        //    foreach (string str in arr)
        //    {
        //        Console.WriteLine(str);
        //    }
        //}
    }
}
