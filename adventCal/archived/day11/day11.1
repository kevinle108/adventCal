using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ConsoleApp1
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine("Program start.");
            StreamReader file = new StreamReader("input.txt");
            int counter = 0;
            string line;
            //List<string> lines = new List<string>();
            List<string> lines = new List<string>();
            // 0 - 89 rows, 0 - 94 cols
            while ((line = file.ReadLine()) != null)
            {
                //if (counter == 3)
                //{
                //    break;
                //}
                //Console.WriteLine(line.Length);
                lines.Add(line);
                counter++;
            }
            file.Close();

            int round = 1;
            int curRoundCount = -1;
            int prevRoundCount = -1;
            bool keepGoing = true;
            while (keepGoing)
            {
                Console.WriteLine($"\nRound {round}");
                ExecuteRound(lines);
                Display(lines);
                curRoundCount = CountOccupiedSeats(lines);
                Console.WriteLine($"Seats: {curRoundCount}");
                if (curRoundCount == prevRoundCount)
                {
                    keepGoing = false;
                }
                else
                {
                    prevRoundCount = curRoundCount;
                    round++;
                }
                
            }


            Console.WriteLine($"\n{counter} lines read");
            Console.WriteLine("Program done.");

        }

        private static int CountOccupiedSeats(List<string> lines)
        {
            int sumSeats = 0;
            foreach (string str in lines)
            {
                sumSeats += str.Where(x => x == '#').ToList().Count;
            }
            return sumSeats;
        }

        private static void ExecuteRound(List<string> lines)
        {
            List<List<int>> toEmpty = new List<List<int>>();
            List<List<int>> toOccupied = new List<List<int>>();
            for (int i = 0; i < lines.Count; i++) // for each line string
            {
                List<int> rowToEmpty = new List<int>();
                List<int> rowToOccupied = new List<int>();

                for (int j = 0; j < lines[i].Length; j++) // for each char in string
                {
                    char self = lines[i][j];
                    if (self == 'L' || self == '#')
                    {
                        int surSeatsOccupied = OccupiedAdj(i, j, lines);
                        if (self == 'L')
                        {
                            if (surSeatsOccupied == 0)
                            {
                                rowToOccupied.Add(j);
                            }
                        }
                        else if (self == '#')
                        {
                            if (surSeatsOccupied >= 4)
                            {
                                rowToEmpty.Add(j);
                            }
                        }
                        else
                        {
                            // do nothing
                        }
                    }
                }
                toEmpty.Add(rowToEmpty);
                toOccupied.Add(rowToOccupied);
            }

            for (int i = 0; i < toEmpty.Count; i++)
            {
                StringBuilder sb = new StringBuilder(lines[i]);
                for (int j = 0; j < toEmpty[i].Count; j++)
                {
                    int index = toEmpty[i][j];
                    sb[index] = 'L';
                }
                lines[i] = sb.ToString();
            }

            for (int i = 0; i < toOccupied.Count; i++)
            {
                StringBuilder sb = new StringBuilder(lines[i]);
                for (int j = 0; j < toOccupied[i].Count; j++)
                {
                    int index = toOccupied[i][j];
                    sb[index] = '#';
                }
                lines[i] = sb.ToString();
            }
        }

        public static int OccupiedAdj(int row, int col, List<string> lines)
        {
            int lastColIndex = lines[row].Length - 1;
            int lastRowIndex = lines.Count - 1;
            char self = lines[row][col];
            List<char> seats = new List<char>();
            // check row
            if (row == 0)
            {
                if (col == 0)
                {
                    seats.Add(lines[row][col+1]);
                    seats.Add(lines[row + 1][col]);
                    seats.Add(lines[row + 1][col + 1]);
                }
                else if (col == lastColIndex)
                {
                    seats.Add(lines[row][col-1]);
                    seats.Add(lines[row + 1][col]);
                    seats.Add(lines[row + 1][col - 1]);
                }
                else
                {
                    seats.Add(lines[row][col-1]); 
                    seats.Add(lines[row][col+1]); 
                    seats.Add(lines[row + 1][col + 1]); 
                    seats.Add(lines[row + 1][col]); 
                    seats.Add(lines[row + 1][col - 1]); 
                }
            }
            else if (row == lastRowIndex)
            {
                if (col == 0)
                {
                    seats.Add(lines[row][col+1]);
                    seats.Add(lines[row-1][col]);
                    seats.Add(lines[row-1][col+1]);
                }
                else if (col == lastColIndex)
                {
                    seats.Add(lines[row][col-1]);
                    seats.Add(lines[row-1][col]);
                    seats.Add(lines[row-1][col-1]);
                }
                else
                {
                    seats.Add(lines[row][col-1]); 
                    seats.Add(lines[row][col+1]); 
                    seats.Add(lines[row-1][col+1]); 
                    seats.Add(lines[row-1][col]); 
                    seats.Add(lines[row-1][col-1]); 
                }
            }
            else // row is not 0 or lastRow
            {
                if (col == 0)
                {
                    seats.Add(lines[row][col+1]); 
                    seats.Add(lines[row-1][col]); 
                    seats.Add(lines[row-1][col+1]); 
                    seats.Add(lines[row + 1][col]); 
                    seats.Add(lines[row + 1][col + 1]);
                }
                else if (col == lastColIndex)
                {
                    seats.Add(lines[row][col-1]);
                    seats.Add(lines[row-1][col]);
                    seats.Add(lines[row-1][col-1]);
                    seats.Add(lines[row + 1][col]);
                    seats.Add(lines[row + 1][col - 1]);
                }
                else
                {
                    seats.Add(lines[row][col - 1]);
                    seats.Add(lines[row][col + 1]);

                    seats.Add(lines[row - 1][col - 1]);
                    seats.Add(lines[row - 1][col]);
                    seats.Add(lines[row - 1][col + 1]);

                    seats.Add(lines[row + 1][col - 1]);
                    seats.Add(lines[row + 1][col]);
                    seats.Add(lines[row + 1][col + 1]);
                }
            }
            return seats.Where(x => x == '#').ToList().Count;

            //char self = lines[row][col];
            //char dirLeft = lines[row][col-1];
            //char dirRight = lines[row][col+1];

            //char aboveLeft = lines[row-1][col-1];
            //char aboveCenter = lines[row-1][col];
            //char aboveRight = lines[row-1][col+1];

            //char belowLeft = lines[row + 1][col - 1];
            //char belowCenter = lines[row + 1][col];
            //char belowRight = lines[row + 1][col + 1];

            // 0, 0 -> dirRight, belowCenter, belowRight
            // 0, 94 -> dirLeft, belowCenter, belowLeft
            // 0, col -> dirLeft, dirRight, belowRight, belowCenter, belowLeft

            // row, 0 -> dirRight, aboveCenter, aboveRight, belowCenter, belowRight
            // row, 94 -> dirLeft, aboveCenter, aboveLeft, belowCenter, belowLeft

            // 89, 0 -> dirRight, aboveCenter, aboveRight
            // 89, 94 -> dirLeft, aboveCenter, aboveLeft
            // 89, col -> dirLeft, dirRight, aboveCenter, aboveLeft, aboveCenter, aboveRight
        }

        public static List<int> DeepCopyList(List<int> lines)
        {
            List<int> copyList = new List<int>();
            foreach (int line in lines)
            {
                copyList.Add(line);
            }
            return copyList;
        }

        public static void Display<T>(List<T> arr, params string[] parameters)
        {
            //foreach (int num in arr)
            //{
            //    Console.WriteLine(num);
            //}
            arr.ForEach(x => Console.WriteLine(x));
        }

        public static void DisplayListList(List<List<string>> listArr)
        {
            foreach (List<string> arr in listArr)
            {
                Console.WriteLine(arr[0]);
                Console.WriteLine($"   {arr[1]}");
            }
        }

        //public static void Display(List<string> arr)
        //{
        //    foreach (string str in arr)
        //    {
        //        Console.WriteLine(str);
        //    }
        //}
    }
}
